from flask import Flask, render_template, request, redirect, url_for, session, flash
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from werkzeug.security import generate_password_hash, check_password_hash
from werkzeug.utils import secure_filename
import os

# 設置 Flask 應用和資料庫
app = Flask(__name__)
app.secret_key = 'your_secret_key'  # 用於 session 和加密
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///products.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['UPLOAD_FOLDER'] = 'static/uploads'
app.config['ALLOWED_EXTENSIONS'] = {'png', 'jpg', 'jpeg', 'gif'}

db = SQLAlchemy(app)
migrate = Migrate(app, db)


# 檢查檔案類型是否允許
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']

# 商品編輯視圖
@app.route('/product/edit/<int:product_id>', methods=['GET', 'POST'])
def edit_product(product_id):
    product = Product.query.get_or_404(product_id)
    if request.method == 'POST':
        product.title = request.form['title']
        product.size = request.form['size']
        product.content = request.form['content']
        product.price = request.form['price']

        # 處理圖片上傳
        for i in range(1, 4):
            image_field = f'image{i}'
            if image_field in request.files:
                image = request.files[image_field]
                if image and allowed_file(image.filename):
                    image_filename = secure_filename(image.filename)
                    image.save(os.path.join(app.config['UPLOAD_FOLDER'], image_filename))
                    setattr(product, f'image{i}_filename', image_filename)

        db.session.commit()
        return redirect(url_for('index'))

    return render_template('product_form.html', product=product)


# 資料表：商品
class Product(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(50))
    size = db.Column(db.String(50))
    content = db.Column(db.Text)
    price = db.Column(db.Float, nullable=False, default=0.0)
    image1_filename = db.Column(db.String(200))
    image2_filename = db.Column(db.String(200))
    image3_filename = db.Column(db.String(200))


# 資料表：會員
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)


# 首頁 - 商品列表
@app.route('/')
def index():
    products = Product.query.all()
    return render_template('products.html', products=products)


# 註冊
@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        # 使用 pbkdf2:sha256 進行雜湊
        hashed_password = generate_password_hash(password, method='pbkdf2:sha256', salt_length=8)
        
        user = User(username=username, password=hashed_password)
        db.session.add(user)
        db.session.commit()
        
        flash('註冊成功，請登入！', 'success')
        return redirect(url_for('login'))
    
    return render_template('register.html')


# 登入
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        user = User.query.filter_by(username=username).first()
        
        if user and check_password_hash(user.password, password):
            session['user_id'] = user.id
            session['username'] = user.username
            flash('登入成功！', 'success')
            return redirect(url_for('index'))
        else:
            flash('無效的使用者名稱或密碼！', 'danger')
    
    return render_template('login.html')


# 登出
@app.route('/logout')
def logout():
    session.pop('user_id', None)
    session.pop('username', None)
    flash('已成功登出！', 'success')
    return redirect(url_for('login'))


# 新增商品
@app.route('/product/new', methods=['GET', 'POST'])
def new_product():
    if request.method == 'POST':
        title = request.form['title']
        size = request.form['size']
        content = request.form['content']
        price = request.form['price']

        image_filename = None
        if 'image' in request.files:
            image = request.files['image']
            if image and allowed_file(image.filename):
                image_filename = secure_filename(image.filename)
                image.save(os.path.join(app.config['UPLOAD_FOLDER'], image_filename))

        new_product = Product(title=title, size=size, content=content, price=price, image_filename=image_filename)
        db.session.add(new_product)
        db.session.commit()
        return redirect(url_for('index'))

    return render_template('product_form.html')


# 商品編輯
@app.route('/product/edit/<int:product_id>', methods=['GET', 'POST'])
def edit_product(product_id):
    product = Product.query.get_or_404(product_id)
    if request.method == 'POST':
        product.title = request.form['title']
        product.size = request.form['size']
        product.content = request.form['content']
        product.price = request.form['price']

        if 'image' in request.files:
            image = request.files['image']
            if image and allowed_file(image.filename):
                image_filename = secure_filename(image.filename)
                image.save(os.path.join(app.config['UPLOAD_FOLDER'], image_filename))
                product.image_filename = image_filename

        db.session.commit()
        return redirect(url_for('index'))

    return render_template('product_form.html', product=product)


# 商品刪除
@app.route('/product/<int:product_id>/delete', methods=['GET', 'POST'])
def delete_product(product_id):
    product = Product.query.get_or_404(product_id)
    db.session.delete(product)
    db.session.commit()
    return redirect(url_for('index'))


if __name__ == '__main__':
    app.run(debug=True)
